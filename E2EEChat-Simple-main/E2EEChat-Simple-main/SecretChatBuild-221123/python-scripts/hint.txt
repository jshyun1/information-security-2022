#### remove this file when submit


====================decrypt-message.py

from Crypto.Util.Padding import unpad
from Crypto.Cipher import AES
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def read_from_base64():
    return [ decode_base64(input()), decode_base64(input()), decode_base64(input())]

def decrypt_message(key, iv, message):
    tool = AES.new(key, AES.MODE_CBC,iv)
    de_msg = unpad(tool.decrypt(message),16)
    return de_msg
    # AES 256 암호화 구현

[secretkey, iv, message] = read_from_base64()

result = decrypt_message(secretkey, iv, message).decode('utf-8')
print(result)


==========================decrypt-secret.py
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def read_from_base64():
    return [ decode_base64(input()), decode_base64(input()) ]

def decrypt_secret(secret, priKey):
    k = RSA.importKey(priKey)
    tool=PKCS1_OAEP.new(k)
    de_secret = tool.decrypt(secret)
    return de_secret
    # PKCS#1 OAEP를 이용한 RSA 복호화 구현

[secret, prikey] = read_from_base64()
result = decrypt_secret(secret, prikey).decode('ascii')

print(result)

===========================encrypt-message.py
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def encode_base64(p):
    return base64.b64encode(p).decode('ascii')

def read_from_base64():
    return [ decode_base64(input()), input() ]

def pad_message(msg):
    padded_msg = pad(msg.encode('utf-8'),16) # 메세지 패딩 구현
    return padded_msg

def encrypt_message(key, iv, msg):
    tool = AES.new(key, AES.MODE_CBC, iv)
    en_msg = encode_base64(tool.encrypt(msg))
    return en_msg
    # AES 256 암호화 구현

[secretkey, message] = read_from_base64()

message = pad_message(message)
randomiv = get_random_bytes(16)# 16바이트 (128비트 IV 랜덤 생성)

randomiv_str = encode_base64(randomiv)
cipher_str = encrypt_message(secretkey, randomiv, message)

print(randomiv_str + '!' + cipher_str)


================================encrypt-secret.p
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def encode_base64(p):
    return base64.b64encode(p).decode('ascii')

def read_from_base64():
    return [ decode_base64(input()), decode_base64(input()) ]

def encrypt_secret(secret, pubkey):
    k = RSA.importKey(pubkey)
    tool = PKCS1_OAEP.new(k)
    en_secret = tool.encrypt(secret)
    return en_secret
    # PKCS#1 OAEP를 이용한 RSA 암호화 구현

[secret, pubkey] = read_from_base64()
cipher_str = encrypt_secret(secret, pubkey)

print(cipher_str)

=======================================generate-keys.py 
from Crypto import Random
from Crypto.PublicKey import RSA
import base64

def encode_base64(p):
    return base64.b64encode(p).decode('ascii')

secret = Random.new().read(32)# 32바이트 (256비트) 랜덤 비밀키 생성

rsa = RSA.generate(2048)# RSA 2048 키 생성 시작
pubkey = rsa.publickey().exportKey()# 공개키 export
prikey = rsa.exportKey()# 개인키 export


print(encode_base64(secret) + '\n')

print(encode_base64(pubkey) + '\n')
print(encode_base64(prikey) + '\n')
=======================================/sign-message.py

from Crypto import Random
from Crypto.Signature import pkcs1_15
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def encode_base64(p):
    return base64.b64encode(p).decode('ascii')

def make_message_hash(msg):
    return SHA256.new(msg.encode('utf-8'))

def read_from_base64():
    return [ input(), decode_base64(input()) ]

# https://pycryptodome.readthedocs.io/en/latest/src/signature/pkcs1_v1_5.html
def sign(msg, key):
    key = RSA.import_key(key)
    h = SHA256.new(msg.encode())
    signature = pkcs1_15.new(key).sign(h)
    return signature
    # PKCS #1 v1.5 를 이용한 전자서명 생성

[msg, prikey] = read_from_base64()

sign_result = sign(msg, prikey)
print( encode_base64(sign_result) )

========================================verify-message.py

from Crypto import Random
from Crypto.Signature import pkcs1_15
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import base64

def decode_base64(b64):
    return base64.b64decode(b64)

def encode_base64(p):
    return base64.b64encode(p).decode('ascii')

def make_message_hash(msg):
    return SHA256.new(msg.encode('utf-8'))

def read_from_base64():
    return [ input(), decode_base64(input()), decode_base64(input()) ]

# https://pycryptodome.readthedocs.io/en/latest/src/signature/pkcs1_v1_5.html
def verify(msg, key, signature):
    key = RSA.import_key(key)
    h = SHA256.new(msg.encode())
    try:
        pkcs1_15.new(key).verify(h, signature)
        print("ok")
        return "ok"
        # "The signature is valid."
    except (ValueError, TypeError):
        print("The signature is not valid.")
    # PKCS #1 v1.5 를 이용한 전자서명 검증, 성공시 "ok" 리턴

[msg, pubkey, signature] = read_from_base64()

verify_result = verify(msg, pubkey, signature)
print( verify_result )

